%% Do not edit unless you really know what you are doing.
\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage{fancyvrb}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{pdfstartview={XYZ null null 1}}

\begin{document}

<<setup, include=FALSE>>=
library(knitr)
library(ggplot2)
library(timeSeries)
opts_chunk$set(fig.path='figure/minimal-', fig.align='center', fig.show='hold')

set.seed(1121)
options(formatR.arrow=TRUE,width=90)

source("calendarHeat.R")

agregatePerDay <- function(dates, values, f) {
   t = strptime(dates, format="%F %T %z")
   ts = timeSeries(values, t)
   by = timeSequence(from=start(ts), to=end(ts), by='day')
   timeSeries::aggregate(ts, by, f)
}

d = read.csv("data.csv", quote="'")
d$Time = strptime(d$Date, format="%F %T %z")

# We could use many different data subsets, ie. for a GIT message tag or an
# author:
#auth  = subset(d, grepl("authPat", d$Author) | grepl("anotherPat", d$Author))

commits       = agregatePerDay(d$Date, d$Commit, length)
files         = agregatePerDay(d$Date, d$Files, sum)
removals      = agregatePerDay(d$Date, d$Delete, sum)
inserts       = agregatePerDay(d$Date, d$Insert, sum)

df = data.frame(time(commits), commits$TS.1, files$TS.1, inserts$TS.1, removals$TS.1)
names(df) <- c("time", "commits", "files", "inserts", "removals")
df$runInserts  = as.numeric(filter(df$inserts, rep(1/7,7), sides=2))
df$runRemovals = as.numeric(filter(df$removals, rep(1/7,7), sides=2))
@

\title{Repo Activity analyzes}
\author{a small hackathon team}

\maketitle

All files updated per day, and number of commits.

<<Commits, fig.width=10, fig.height=6, out.width='.95\\linewidth'>>=
calendarHeat(time(commits), commits, varname="Activity")
calendarHeat(time(files), files, varname="Proj Activity (Files)")
@

Those are all our commits on master branch, in 2014 and 2015. You
done quite much, always so nice working together.

<<by auth, fig.width=10, fig.height=6, out.width='.95\\linewidth'>>=
#calendarHeat(time(commitsPerDayYiP), commitsPerDayYiP, varname="Auth Activity")
@

Maybe we could do more analyzes, graphs and visualization? Would you like
joining the project?
\url{https://github.com/przemekr/git-graphs}

OK, some other graphics, lets try rolling and cumulative sums

<<cumulative, fig.width=10, fig.height=6, out.width='.95\\linewidth'>>=
ggplot() + 
  geom_point(data = df, aes(x = time, y = cumsum(inserts), color = "Inserts"))  +
  geom_point(data = df, aes(x = time, y = cumsum(removals), color = "Removals"))  +
  stat_smooth(data = df, aes(x = time, y = cumsum(inserts))) +
  xlab('date') +
  ylab('cumulative sum, no of lines')

@

<<rolling, fig.width=10, fig.height=6, out.width='.95\\linewidth'>>=
ggplot() + 
  geom_point(data = df, aes(x = time, y = runInserts, color = "Inserts"))  +
  geom_point(data = df, aes(x = time, y = runRemovals, color = "Removals"))  +
  stat_smooth(data = df, aes(x = time, y = runInserts)) +
  xlab('date') +
  ylab('7 days rolling avarage, no of lines')
@

<<all_repos, fig.width=10, fig.height=6, out.width='.95\\linewidth'>>=
ggplot(data = d, aes(x = Time, y = Insert, color = Repo)) + 
  geom_point()  +
  stat_smooth() +
  xlab('date') +
  ylab('all my repos')
@

\end{document}
